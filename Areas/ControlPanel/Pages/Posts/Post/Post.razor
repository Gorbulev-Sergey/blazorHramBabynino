<div class="bg-dark text-light mb-2 rounded d-flex">
    <div class="m-3 flex-grow-1 d-flex flex-column justify-content-between">
        <div>
            <h5 class="text-white mb-0">@post.title</h5>
            <div class="text-muted small mb-1">@post.created.ToShortDateString()</div>
            <p>@((MarkupString)post.description)</p>
        </div>
        <div>
            <select class="btn btn-sm btn-outline-light" @bind="type">
                @foreach (var item in Enum.GetValues(typeof(type)))
                {
                    <option>@item</option>
                }
            </select>
            <select class="btn btn-sm btn-outline-light" @bind="published">
                <option value="True">опубликован</option>
                <option value="False">неопубликован</option>
            </select>
        </div>
    </div>

    @if (!string.IsNullOrEmpty(post.cover_video))
    {
        <div class="embed-responsive embed-responsive-16by9 w-25">
            <iframe class="embed-responsive-item" src="@post.cover_video"></iframe>
        </div>
    }
    else if (!string.IsNullOrEmpty(post.cover_image))
    {
        <img class="img-fluid w-25 h-100 align-self-center" src="@post.cover_image" />
    }

    <div class="m-3 d-flex flex-column justify-content-center">
        <a class="btn btn-sm btn-outline-light mb-1" href="/cpanel/posts/details/@post.ID"><i class="fas fa-eye"></i></a>
        <a class="btn btn-sm btn-outline-light mb-1" title="Изменить" href="/cpanel/posts/edit/@post.ID"><i class="fas fa-pencil-alt"></i></a>
        <button class="btn btn-sm btn-danger" @onclick="() => удалить.InvokeAsync(post)"><i class="fas fa-trash"></i></button>
    </div>
</div>

@code {
    [Parameter]
    public post post { get; set; }

    [Parameter]
    public EventCallback<post> удалить { get; set; }

    [Parameter]
    public EventCallback<post> обновить { get; set; }

    string type
    {
        get => post.type.ToString();
        set
        {
            post.type = (type) Enum.Parse(typeof(type), value);
            обновить.InvokeAsync(post);
        }
    }

    string published
    {
        get => post.published.ToString();
        set
        {
            post.published = Boolean.Parse(value);
            обновить.InvokeAsync(post);
        }
    }
}
